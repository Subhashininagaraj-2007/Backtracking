class Solution {
       static int[] row = {0, 1, 0, -1};
    static int[] col = {1, 0, -1, 0};
    static boolean isSafe(int[][] mat, boolean[][] vis, int x, int y, int n, int m) {
        return (x >= 0 && x < n && y >= 0 && y < m &&
                mat[x][y] == 1 && !vis[x][y]);
    }
    static int dfs(int[][] mat, boolean[][] vis, int i, int j,
                   int xd, int yd, int n, int m, int dist) {
        if (i == xd && j == yd) {
            return dist;
        }
        vis[i][j] = true;

        int maxDist = -1; 
        for (int k = 0; k < 4; k++) {
            int newX = i + row[k];
            int newY = j + col[k];

            if (isSafe(mat, vis, newX, newY, n, m)) {
                maxDist = Math.max(maxDist,
                                   dfs(mat, vis, newX, newY, xd, yd, n, m, dist + 1));
            }
        }
        vis[i][j] = false;

        return maxDist;
    }
    public static int longestPath(int[][] mat, int n, int m, int xs, int ys, int xd,
                                  int yd) {
          if (mat[xs][ys] == 0 || mat[xd][yd] == 0) return -1;

        boolean[][] vis = new boolean[n][m];

        int ans = dfs(mat, vis, xs, ys, xd, yd, n, m, 0);

        return ans;
        
    }
}
